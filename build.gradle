buildscript {
    repositories {
        maven {
            url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE'
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.moowork.node'

group 'com.wilqor.workshop.bytebay'
version '1.0'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // commons compress, for parsing bzipped files
    compile 'org.apache.commons:commons-compress:1.16.1'

    // Lucene dependencies
    compile 'org.apache.lucene:lucene-core:7.2.1'
    compile 'org.apache.lucene:lucene-analyzers-common:7.2.1'
    compile 'org.apache.lucene:lucene-facet:7.2.1'
    compile 'org.apache.lucene:lucene-queryparser:7.2.1'
    compile 'org.apache.lucene:lucene-analyzers-morfologik:7.2.1'

    // Json
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.0'

    // Logging
    compile 'org.apache.logging.log4j:log4j-api:2.7'
    compile 'org.apache.logging.log4j:log4j-core:2.7'

    // Yaml
    compile 'org.yaml:snakeyaml:1.19'

    // Spring Boot
    compile 'org.springframework.boot:spring-boot-starter-web:1.5.10.RELEASE'

    // test dependencies
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.apache.commons:commons-lang3:3.7'
}

def wikisearchapp = "$projectDir/src/main/wikisearch"

node {
    // version of Node to use
    version = '8.10.0'
    // if true, it will download node using specified parameters
    // if false, it will try to use globally installed node
    download = true
    // set the work directory where node_modules should be located
    nodeModulesDir = file("$wikisearchapp")
}

sourceSets {
    main {
        resources {
            srcDirs = ["$wikisearchapp/dist", "$projectDir/src/main/resources"]
        }
    }
}

task buildClient(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile client side folder for production'
    args = ['run', 'build']
}

bootRun.dependsOn(buildClient)
